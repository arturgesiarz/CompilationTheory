
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassocLGLEGENEQEQleftADDSUBleftDOTADDDOTSUBleftMULDIVleftDOTMULDOTDIVrightUMINUSrightTRANSPOSITIONADD ADDASSIGN ASSIGN BREAK COMMA CONTINUE CURLYCLOSE CURLYOPEN DIV DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR G GE ID IF INTNUM L LE MUL MULASSIGN NEQ ONES PRINT RANGE RETURN ROUNDCLOSE ROUNDOPEN SEMICOLON SQUARECLOSE SQUAREOPEN STRING SUB SUBASSIGN TRANSPOSITION WHILE ZEROSinstructions : instruction\n                    | instruction instructionsinstruction : block\n                    | conditional\n                    | loop\n                    | statement SEMICOLON\n                    | error SEMICOLONstatement : assignment\n                    | flow_keyword\n                    | fun\n                    | return\n                    | printflow_keyword : BREAK\n                    | CONTINUEblock : CURLYOPEN instructions CURLYCLOSE\n                | CURLYOPEN error CURLYCLOSEprint : PRINT print_bodyprint_body : string\n                    | expression\n                    | string COMMA print_body\n                    | expression COMMA print_bodyreturn : RETURN expression\n            | RETURNstring : STRINGconditional : IF ROUNDOPEN expression ROUNDCLOSE instruction %prec IFX\n                    | IF ROUNDOPEN expression ROUNDCLOSE instruction ELSE instructionloop : while\n            | forwhile : WHILE ROUNDOPEN expression ROUNDCLOSE instructionfor : FOR ID ASSIGN numeric_expression RANGE numeric_expression instructionfun : fun_name ROUNDOPEN fun_body ROUNDCLOSE\n            | fun_name ROUNDOPEN error ROUNDCLOSEfun_body : numeric_expression\n                | numeric_expression COMMA fun_bodyfun_name : ZEROS\n                | ONES\n                | EYEassignment : assignment_left_side assignment_operator expression\n                    | assignment_left_side ASSIGN string\n                    | assignment_left_side ASSIGN matrix\n                    | assignment_left_side ASSIGN vectorassignment_left_side : varassignment_operator : ASSIGN\n                            | ADDASSIGN\n                            | SUBASSIGN\n                            | MULASSIGN\n                            | DIVASSIGNmatrix : SQUAREOPEN matrix_body SQUARECLOSEmatrix_body : vector\n                    | vector  COMMA matrix_bodyvector : SQUAREOPEN vector_body SQUARECLOSE\n                | SQUAREOPEN SQUARECLOSEvector_body : numeric_expression\n                    | numeric_expression COMMA  vector_bodyexpression : comparison_expression\n                | numeric_expression\n                | funcomparison_expression : numeric_expression L numeric_expression\n            | numeric_expression G numeric_expression\n            | numeric_expression EQ numeric_expression\n            | numeric_expression NEQ numeric_expression\n            | numeric_expression GE numeric_expression\n            | numeric_expression LE numeric_expression\n            | ROUNDOPEN comparison_expression ROUNDCLOSEnumeric_expression : numeric_expression ADD termnumeric_expression : numeric_expression SUB termnumeric_expression : numeric_expression DOTADD term\n                        | numeric_expression DOTSUB termnumeric_expression : termterm : term MUL factorterm : term DIV factorterm : term DOTMUL factor\n            | term DOTDIV factorterm : factorfactor : FLOATNUMfactor : INTNUMfactor : varfactor : ROUNDOPEN numeric_expression ROUNDCLOSE\n            | unary_operatorunary_operator : negation\n                | transpositionnegation : SUB factor %prec UMINUStransposition : factor TRANSPOSITIONvar : ID\n            | ID SQUAREOPEN fun_body SQUARECLOSE\n            '
    
_lr_action_items = {'error':([0,2,3,4,5,8,10,11,19,31,32,45,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[7,7,-3,-4,-5,34,-27,-28,-84,-6,-7,78,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,7,7,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,7,7,-26,-30,]),'CURLYOPEN':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[8,8,-3,-4,-5,8,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,8,8,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,8,8,-26,-30,]),'IF':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[9,9,-3,-4,-5,9,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,9,9,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,9,9,-26,-30,]),'WHILE':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[17,17,-3,-4,-5,17,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,17,17,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,17,17,-26,-30,]),'FOR':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[18,18,-3,-4,-5,18,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,18,18,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,18,18,-26,-30,]),'BREAK':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[21,21,-3,-4,-5,21,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,21,21,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,21,21,-26,-30,]),'CONTINUE':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[22,22,-3,-4,-5,22,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,22,22,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,22,22,-26,-30,]),'RETURN':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[24,24,-3,-4,-5,24,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,24,24,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,24,24,-26,-30,]),'PRINT':([0,2,3,4,5,8,10,11,19,31,32,51,53,54,55,56,57,58,59,64,65,95,96,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[25,25,-3,-4,-5,25,-27,-28,-84,-6,-7,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,25,25,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,25,25,-26,-30,]),'ZEROS':([0,2,3,4,5,8,10,11,19,24,25,31,32,35,36,39,40,41,42,43,44,51,53,54,55,56,57,58,59,64,65,95,96,97,98,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[27,27,-3,-4,-5,27,-27,-28,-84,27,27,-6,-7,27,27,27,-43,-44,-45,-46,-47,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,27,27,27,27,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,27,27,-26,-30,]),'ONES':([0,2,3,4,5,8,10,11,19,24,25,31,32,35,36,39,40,41,42,43,44,51,53,54,55,56,57,58,59,64,65,95,96,97,98,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[28,28,-3,-4,-5,28,-27,-28,-84,28,28,-6,-7,28,28,28,-43,-44,-45,-46,-47,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,28,28,28,28,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,28,28,-26,-30,]),'EYE':([0,2,3,4,5,8,10,11,19,24,25,31,32,35,36,39,40,41,42,43,44,51,53,54,55,56,57,58,59,64,65,95,96,97,98,99,100,102,119,120,121,122,124,125,126,127,128,131,132,139,140,143,144,],[29,29,-3,-4,-5,29,-27,-28,-84,29,29,-6,-7,29,29,29,-43,-44,-45,-46,-47,-69,-74,-75,-76,-77,-79,-80,-81,-15,-16,-82,-83,29,29,29,29,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,29,29,-26,-30,]),'ID':([0,2,3,4,5,8,10,11,18,19,24,25,31,32,35,36,38,39,40,41,42,43,44,45,50,51,52,53,54,55,56,57,58,59,64,65,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,96,97,98,99,100,102,103,105,119,120,121,122,124,125,126,127,128,131,132,133,138,139,140,143,144,],[19,19,-3,-4,-5,19,-27,-28,37,-84,19,19,-6,-7,19,19,19,19,-43,-44,-45,-46,-47,19,19,-69,19,-74,-75,-76,-77,-79,-80,-81,-15,-16,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-82,-83,19,19,19,19,-85,19,19,-65,-66,-67,-68,-78,-70,-71,-72,-73,-25,-29,19,19,19,19,-26,-30,]),'$end':([1,2,3,4,5,10,11,30,31,32,64,65,131,132,143,144,],[0,-1,-3,-4,-5,-27,-28,-2,-6,-7,-15,-16,-25,-29,-26,-30,]),'CURLYCLOSE':([2,3,4,5,10,11,30,31,32,33,34,64,65,131,132,143,144,],[-1,-3,-4,-5,-27,-28,-2,-6,-7,64,65,-15,-16,-25,-29,-26,-30,]),'ELSE':([3,4,5,10,11,31,32,64,65,131,132,143,144,],[-3,-4,-5,-27,-28,-6,-7,-15,-16,139,-29,-26,-30,]),'SEMICOLON':([6,7,12,13,14,15,16,19,21,22,24,34,46,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,95,96,102,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,136,],[31,32,-8,-9,-10,-11,-12,-84,-13,-14,-23,32,-22,-55,-56,-57,-69,-74,-75,-76,-77,-79,-80,-81,-17,-18,-19,-24,-38,-39,-40,-41,-82,-83,-85,-52,-31,-32,-58,-59,-60,-61,-62,-63,-65,-66,-67,-68,-64,-78,-70,-71,-72,-73,-20,-21,-48,-51,]),'ROUNDOPEN':([9,17,23,24,25,27,28,29,35,36,38,39,40,41,42,43,44,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[35,36,45,50,50,-35,-36,-37,50,50,71,50,-43,-44,-45,-46,-47,71,50,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,50,50,71,71,71,71,]),'ASSIGN':([19,20,26,37,102,],[-84,40,-42,68,-85,]),'ADDASSIGN':([19,20,26,102,],[-84,41,-42,-85,]),'SUBASSIGN':([19,20,26,102,],[-84,42,-42,-85,]),'MULASSIGN':([19,20,26,102,],[-84,43,-42,-85,]),'DIVASSIGN':([19,20,26,102,],[-84,44,-42,-85,]),'TRANSPOSITION':([19,53,54,55,56,57,58,59,95,96,102,124,125,126,127,128,],[-84,96,-75,-76,-77,-79,-80,-81,96,-83,-85,-78,96,96,96,96,]),'MUL':([19,51,53,54,55,56,57,58,59,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,91,-74,-75,-76,-77,-79,-80,-81,-82,-83,-85,91,91,91,91,-78,-70,-71,-72,-73,]),'DIV':([19,51,53,54,55,56,57,58,59,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,92,-74,-75,-76,-77,-79,-80,-81,-82,-83,-85,92,92,92,92,-78,-70,-71,-72,-73,]),'DOTMUL':([19,51,53,54,55,56,57,58,59,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,93,-74,-75,-76,-77,-79,-80,-81,-82,-83,-85,93,93,93,93,-78,-70,-71,-72,-73,]),'DOTDIV':([19,51,53,54,55,56,57,58,59,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,94,-74,-75,-76,-77,-79,-80,-81,-82,-83,-85,94,94,94,94,-78,-70,-71,-72,-73,]),'L':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,79,-69,-74,-75,-76,-77,-79,-80,-81,79,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'G':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,80,-69,-74,-75,-76,-77,-79,-80,-81,80,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'EQ':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,81,-69,-74,-75,-76,-77,-79,-80,-81,81,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'NEQ':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,82,-69,-74,-75,-76,-77,-79,-80,-81,82,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'GE':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,83,-69,-74,-75,-76,-77,-79,-80,-81,83,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'LE':([19,48,51,53,54,55,56,57,58,59,90,95,96,102,119,120,121,122,124,125,126,127,128,],[-84,84,-69,-74,-75,-76,-77,-79,-80,-81,84,-82,-83,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'ADD':([19,48,51,53,54,55,56,57,58,59,70,90,95,96,101,102,104,110,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,140,],[-84,85,-69,-74,-75,-76,-77,-79,-80,-81,85,85,-82,-83,85,-85,85,85,85,85,85,85,85,85,-65,-66,-67,-68,-78,-70,-71,-72,-73,85,]),'SUB':([19,24,25,35,36,38,39,40,41,42,43,44,45,48,50,51,52,53,54,55,56,57,58,59,68,70,71,76,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,101,102,103,104,105,110,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,133,138,140,],[-84,52,52,52,52,52,52,-43,-44,-45,-46,-47,52,86,52,-69,52,-74,-75,-76,-77,-79,-80,-81,52,86,52,52,52,52,52,52,52,52,52,52,52,52,86,52,52,52,52,-82,-83,52,52,86,-85,52,86,52,86,86,86,86,86,86,86,-65,-66,-67,-68,-78,-70,-71,-72,-73,52,52,86,]),'DOTADD':([19,48,51,53,54,55,56,57,58,59,70,90,95,96,101,102,104,110,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,140,],[-84,87,-69,-74,-75,-76,-77,-79,-80,-81,87,87,-82,-83,87,-85,87,87,87,87,87,87,87,87,-65,-66,-67,-68,-78,-70,-71,-72,-73,87,]),'DOTSUB':([19,48,51,53,54,55,56,57,58,59,70,90,95,96,101,102,104,110,113,114,115,116,117,118,119,120,121,122,124,125,126,127,128,140,],[-84,88,-69,-74,-75,-76,-77,-79,-80,-81,88,88,-82,-83,88,-85,88,88,88,88,88,88,88,88,-65,-66,-67,-68,-78,-70,-71,-72,-73,88,]),'COMMA':([19,47,48,49,51,53,54,55,56,57,58,59,61,62,63,70,95,96,102,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,136,],[-84,-55,-56,-57,-69,-74,-75,-76,-77,-79,-80,-81,97,98,-24,103,-82,-83,-85,-52,137,138,-31,-32,-58,-59,-60,-61,-62,-63,-65,-66,-67,-68,-64,-78,-70,-71,-72,-73,-51,]),'ROUNDCLOSE':([19,47,48,49,51,53,54,55,56,57,58,59,66,67,70,77,78,89,90,95,96,102,104,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,134,],[-84,-55,-56,-57,-69,-74,-75,-76,-77,-79,-80,-81,99,100,-33,111,112,123,124,-82,-83,-85,124,-31,-32,-58,-59,-60,-61,-62,-63,-65,-66,-67,-68,-64,-78,-70,-71,-72,-73,-34,]),'SQUARECLOSE':([19,51,53,54,55,56,57,58,59,69,70,76,95,96,102,105,106,107,108,109,110,119,120,121,122,124,125,126,127,128,134,136,141,142,],[-84,-69,-74,-75,-76,-77,-79,-80,-81,102,-33,107,-82,-83,-85,107,135,-52,136,-49,-53,-65,-66,-67,-68,-78,-70,-71,-72,-73,-34,-51,-50,-54,]),'RANGE':([19,51,53,54,55,56,57,58,59,95,96,101,102,119,120,121,122,124,125,126,127,128,],[-84,-69,-74,-75,-76,-77,-79,-80,-81,-82,-83,133,-85,-65,-66,-67,-68,-78,-70,-71,-72,-73,]),'SQUAREOPEN':([19,40,76,137,],[38,76,105,105,]),'FLOATNUM':([24,25,35,36,38,39,40,41,42,43,44,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[54,54,54,54,54,54,-43,-44,-45,-46,-47,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'INTNUM':([24,25,35,36,38,39,40,41,42,43,44,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[55,55,55,55,55,55,-43,-44,-45,-46,-47,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'STRING':([25,40,97,98,],[63,63,63,63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instructions':([0,2,8,],[1,30,33,]),'instruction':([0,2,8,99,100,139,140,],[2,2,2,131,132,143,144,]),'block':([0,2,8,99,100,139,140,],[3,3,3,3,3,3,3,]),'conditional':([0,2,8,99,100,139,140,],[4,4,4,4,4,4,4,]),'loop':([0,2,8,99,100,139,140,],[5,5,5,5,5,5,5,]),'statement':([0,2,8,99,100,139,140,],[6,6,6,6,6,6,6,]),'while':([0,2,8,99,100,139,140,],[10,10,10,10,10,10,10,]),'for':([0,2,8,99,100,139,140,],[11,11,11,11,11,11,11,]),'assignment':([0,2,8,99,100,139,140,],[12,12,12,12,12,12,12,]),'flow_keyword':([0,2,8,99,100,139,140,],[13,13,13,13,13,13,13,]),'fun':([0,2,8,24,25,35,36,39,97,98,99,100,139,140,],[14,14,14,49,49,49,49,49,49,49,14,14,14,14,]),'return':([0,2,8,99,100,139,140,],[15,15,15,15,15,15,15,]),'print':([0,2,8,99,100,139,140,],[16,16,16,16,16,16,16,]),'assignment_left_side':([0,2,8,99,100,139,140,],[20,20,20,20,20,20,20,]),'fun_name':([0,2,8,24,25,35,36,39,97,98,99,100,139,140,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'var':([0,2,8,24,25,35,36,38,39,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,99,100,103,105,133,138,139,140,],[26,26,26,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,26,26,56,56,56,56,26,26,]),'assignment_operator':([20,],[39,]),'expression':([24,25,35,36,39,97,98,],[46,62,66,67,72,62,62,]),'comparison_expression':([24,25,35,36,39,50,97,98,],[47,47,47,47,47,89,47,47,]),'numeric_expression':([24,25,35,36,38,39,45,50,68,71,76,79,80,81,82,83,84,97,98,103,105,133,138,],[48,48,48,48,70,48,70,90,101,104,110,113,114,115,116,117,118,48,48,70,110,140,110,]),'term':([24,25,35,36,38,39,45,50,68,71,76,79,80,81,82,83,84,85,86,87,88,97,98,103,105,133,138,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,119,120,121,122,51,51,51,51,51,51,]),'factor':([24,25,35,36,38,39,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[53,53,53,53,53,53,53,53,95,53,53,53,53,53,53,53,53,53,53,53,53,53,125,126,127,128,53,53,53,53,53,53,]),'unary_operator':([24,25,35,36,38,39,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'negation':([24,25,35,36,38,39,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'transposition':([24,25,35,36,38,39,45,50,52,68,71,76,79,80,81,82,83,84,85,86,87,88,91,92,93,94,97,98,103,105,133,138,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'print_body':([25,97,98,],[60,129,130,]),'string':([25,40,97,98,],[61,73,61,61,]),'fun_body':([38,45,103,],[69,77,134,]),'matrix':([40,],[74,]),'vector':([40,76,137,],[75,109,109,]),'matrix_body':([76,137,],[106,141,]),'vector_body':([76,105,138,],[108,108,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instructions","S'",1,None,None,None),
  ('instructions -> instruction','instructions',1,'p_instructions','MParser.py',24),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','MParser.py',25),
  ('instruction -> block','instruction',1,'p_instruction','MParser.py',38),
  ('instruction -> conditional','instruction',1,'p_instruction','MParser.py',39),
  ('instruction -> loop','instruction',1,'p_instruction','MParser.py',40),
  ('instruction -> statement SEMICOLON','instruction',2,'p_instruction','MParser.py',41),
  ('instruction -> error SEMICOLON','instruction',2,'p_instruction','MParser.py',42),
  ('statement -> assignment','statement',1,'p_statement','MParser.py',46),
  ('statement -> flow_keyword','statement',1,'p_statement','MParser.py',47),
  ('statement -> fun','statement',1,'p_statement','MParser.py',48),
  ('statement -> return','statement',1,'p_statement','MParser.py',49),
  ('statement -> print','statement',1,'p_statement','MParser.py',50),
  ('flow_keyword -> BREAK','flow_keyword',1,'p_flow_keyword','MParser.py',54),
  ('flow_keyword -> CONTINUE','flow_keyword',1,'p_flow_keyword','MParser.py',55),
  ('block -> CURLYOPEN instructions CURLYCLOSE','block',3,'p_block','MParser.py',59),
  ('block -> CURLYOPEN error CURLYCLOSE','block',3,'p_block','MParser.py',60),
  ('print -> PRINT print_body','print',2,'p_print','MParser.py',64),
  ('print_body -> string','print_body',1,'p_print_body','MParser.py',68),
  ('print_body -> expression','print_body',1,'p_print_body','MParser.py',69),
  ('print_body -> string COMMA print_body','print_body',3,'p_print_body','MParser.py',70),
  ('print_body -> expression COMMA print_body','print_body',3,'p_print_body','MParser.py',71),
  ('return -> RETURN expression','return',2,'p_return','MParser.py',80),
  ('return -> RETURN','return',1,'p_return','MParser.py',81),
  ('string -> STRING','string',1,'p_string','MParser.py',88),
  ('conditional -> IF ROUNDOPEN expression ROUNDCLOSE instruction','conditional',5,'p_conditional','MParser.py',92),
  ('conditional -> IF ROUNDOPEN expression ROUNDCLOSE instruction ELSE instruction','conditional',7,'p_conditional','MParser.py',93),
  ('loop -> while','loop',1,'p_loop','MParser.py',100),
  ('loop -> for','loop',1,'p_loop','MParser.py',101),
  ('while -> WHILE ROUNDOPEN expression ROUNDCLOSE instruction','while',5,'p_while','MParser.py',105),
  ('for -> FOR ID ASSIGN numeric_expression RANGE numeric_expression instruction','for',7,'p_for','MParser.py',109),
  ('fun -> fun_name ROUNDOPEN fun_body ROUNDCLOSE','fun',4,'p_fun','MParser.py',113),
  ('fun -> fun_name ROUNDOPEN error ROUNDCLOSE','fun',4,'p_fun','MParser.py',114),
  ('fun_body -> numeric_expression','fun_body',1,'p_fun_body','MParser.py',118),
  ('fun_body -> numeric_expression COMMA fun_body','fun_body',3,'p_fun_body','MParser.py',119),
  ('fun_name -> ZEROS','fun_name',1,'p_fun_name','MParser.py',129),
  ('fun_name -> ONES','fun_name',1,'p_fun_name','MParser.py',130),
  ('fun_name -> EYE','fun_name',1,'p_fun_name','MParser.py',131),
  ('assignment -> assignment_left_side assignment_operator expression','assignment',3,'p_assignment','MParser.py',135),
  ('assignment -> assignment_left_side ASSIGN string','assignment',3,'p_assignment','MParser.py',136),
  ('assignment -> assignment_left_side ASSIGN matrix','assignment',3,'p_assignment','MParser.py',137),
  ('assignment -> assignment_left_side ASSIGN vector','assignment',3,'p_assignment','MParser.py',138),
  ('assignment_left_side -> var','assignment_left_side',1,'p_assignment_left_side','MParser.py',144),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','MParser.py',148),
  ('assignment_operator -> ADDASSIGN','assignment_operator',1,'p_assignment_operator','MParser.py',149),
  ('assignment_operator -> SUBASSIGN','assignment_operator',1,'p_assignment_operator','MParser.py',150),
  ('assignment_operator -> MULASSIGN','assignment_operator',1,'p_assignment_operator','MParser.py',151),
  ('assignment_operator -> DIVASSIGN','assignment_operator',1,'p_assignment_operator','MParser.py',152),
  ('matrix -> SQUAREOPEN matrix_body SQUARECLOSE','matrix',3,'p_matrix','MParser.py',156),
  ('matrix_body -> vector','matrix_body',1,'p_matrix_body','MParser.py',162),
  ('matrix_body -> vector COMMA matrix_body','matrix_body',3,'p_matrix_body','MParser.py',163),
  ('vector -> SQUAREOPEN vector_body SQUARECLOSE','vector',3,'p_vector','MParser.py',171),
  ('vector -> SQUAREOPEN SQUARECLOSE','vector',2,'p_vector','MParser.py',172),
  ('vector_body -> numeric_expression','vector_body',1,'p_vector_body','MParser.py',180),
  ('vector_body -> numeric_expression COMMA vector_body','vector_body',3,'p_vector_body','MParser.py',181),
  ('expression -> comparison_expression','expression',1,'p_expression','MParser.py',189),
  ('expression -> numeric_expression','expression',1,'p_expression','MParser.py',190),
  ('expression -> fun','expression',1,'p_expression','MParser.py',191),
  ('comparison_expression -> numeric_expression L numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',195),
  ('comparison_expression -> numeric_expression G numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',196),
  ('comparison_expression -> numeric_expression EQ numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',197),
  ('comparison_expression -> numeric_expression NEQ numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',198),
  ('comparison_expression -> numeric_expression GE numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',199),
  ('comparison_expression -> numeric_expression LE numeric_expression','comparison_expression',3,'p_comparison_expression','MParser.py',200),
  ('comparison_expression -> ROUNDOPEN comparison_expression ROUNDCLOSE','comparison_expression',3,'p_comparison_expression','MParser.py',201),
  ('numeric_expression -> numeric_expression ADD term','numeric_expression',3,'p_expression_plus','MParser.py',209),
  ('numeric_expression -> numeric_expression SUB term','numeric_expression',3,'p_expression_minus','MParser.py',214),
  ('numeric_expression -> numeric_expression DOTADD term','numeric_expression',3,'p_expression_dot','MParser.py',219),
  ('numeric_expression -> numeric_expression DOTSUB term','numeric_expression',3,'p_expression_dot','MParser.py',220),
  ('numeric_expression -> term','numeric_expression',1,'p_expression_term','MParser.py',224),
  ('term -> term MUL factor','term',3,'p_term_times','MParser.py',228),
  ('term -> term DIV factor','term',3,'p_term_div','MParser.py',232),
  ('term -> term DOTMUL factor','term',3,'p_term_dot','MParser.py',236),
  ('term -> term DOTDIV factor','term',3,'p_term_dot','MParser.py',237),
  ('term -> factor','term',1,'p_term_factor','MParser.py',241),
  ('factor -> FLOATNUM','factor',1,'p_factor_floatnum','MParser.py',245),
  ('factor -> INTNUM','factor',1,'p_factor_intnum','MParser.py',249),
  ('factor -> var','factor',1,'p_factor_var','MParser.py',253),
  ('factor -> ROUNDOPEN numeric_expression ROUNDCLOSE','factor',3,'p_factor_expr','MParser.py',257),
  ('factor -> unary_operator','factor',1,'p_factor_expr','MParser.py',258),
  ('unary_operator -> negation','unary_operator',1,'p_unary_operator','MParser.py',265),
  ('unary_operator -> transposition','unary_operator',1,'p_unary_operator','MParser.py',266),
  ('negation -> SUB factor','negation',2,'p_negation','MParser.py',270),
  ('transposition -> factor TRANSPOSITION','transposition',2,'p_transposition','MParser.py',274),
  ('var -> ID','var',1,'p_var','MParser.py',278),
  ('var -> ID SQUAREOPEN fun_body SQUARECLOSE','var',4,'p_var','MParser.py',279),
]
